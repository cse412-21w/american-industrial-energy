{"version":3,"sources":["pm25_coal.js"],"names":["coalArray","options","config","init","view","tooltip","vegaTooltip","Handler","call","renderer","vl","register","vega","vegaLite","d3","csv","coalData","then","data","forEach","d","push","drawLineVegaLite","markPoint","color","encode","x","fieldQ","y","width","height","render","viewElement","document","getElementById","appendChild"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAqE;AACrE,cAAkB;AACA;;;AAElB,IAAIA,SAAS,GAAG,EAAhB,EAAsB;;AAEtB,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,CACN;AADM,GADM;AAIdC,EAAAA,IAAI,EAAE,cAACC,IAAD,EAAU;AACd;AACAA,IAAAA,IAAI,CAACC,OAAL,CAAa,IAAIC,WAAW,CAACC,OAAhB,GAA0BC,IAAvC;AACD,GAPa;AAQdJ,EAAAA,IAAI,EAAE;AACJ;AACA;AACA;AACA;AACA;AACAK,IAAAA,QAAQ,EAAE;AANN;AARQ,CAAhB;AAkBAC,EAAE,CAACC,QAAH,CAAYC,IAAZ,EAAkBC,QAAlB,EAA4BZ,OAA5B,GAEA;;AACAa,EAAE,CAACC,GAAH,CAAOC,qCAAP,EAAiBC,IAAjB,CAAsB,UAASC,IAAT,EAAe;AACnCA,EAAAA,IAAI,CAACC,OAAL,CAAa,UAASC,CAAT,EAAW;AACtBpB,IAAAA,SAAS,CAACqB,IAAV,CAAeD,CAAf;AACD,GAFD;AAGAE,EAAAA,gBAAgB;AACjB,CALD;;AAOA,SAASA,gBAAT,GAA4B;AAC1B;AACA;AACAZ,EAAAA,EAAE,CAACa,SAAH,CAAa;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAb,EACCN,IADD,CACMlB,SADN,EAECyB,MAFD,CAGIf,EAAE,CAACgB,CAAH,GAAOC,MAAP,CAAc,WAAd,CAHJ,EAIIjB,EAAE,CAACkB,CAAH,GAAOD,MAAP,CAAc,OAAd,CAJJ,EAKIjB,EAAE,CAACL,OAAH,CAAW,CAAC,QAAD,EAAW,OAAX,CAAX,CALJ,EAOCwB,KAPD,CAOO,GAPP,EAQCC,MARD,CAQQ,GARR,EASCC,MATD,GAUCd,IAVD,CAUM,UAAAe,WAAW,EAAI;AACnB;AACA;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,WAAhC,CAA4CH,WAA5C;AACD,GAdD;AAeD","file":"pm25_coal.2ccdf501.js","sourceRoot":"../src","sourcesContent":["import coalData from '../static/coal_consumption_air_quality.csv'    // import dataset\n\"use strict\";     // the code should be executed in \"strict mode\".\n                  // With strict mode, you can not, for example, use undeclared variables\n\nvar coalArray = [];   // used to store data later\n\nconst options = {\n  config: {\n    // Vega-Lite default configuration\n  },\n  init: (view) => {\n    // initialize tooltip handler\n    view.tooltip(new vegaTooltip.Handler().call);\n  },\n  view: {\n    // view constructor options\n    // remove the loader if you don't want to default to vega-datasets!\n    //   loader: vega.loader({\n    //     baseURL: \"\",\n    //   }),\n    renderer: \"canvas\",\n  },\n};\n\nvl.register(vega, vegaLite, options);\n\n// Again, We use d3.csv() to process data\nd3.csv(coalData).then(function(data) {\n  data.forEach(function(d){\n    coalArray.push(d);\n  })\n  drawLineVegaLite();\n});\n\nfunction drawLineVegaLite() {\n  // var sunshine = add_data(vl, sunshine.csv, format_type = NULL);\n  // your visualization goes here\n  vl.markPoint({color:'black'})\n  .data(coalArray)\n  .encode(\n      vl.x().fieldQ('Days PM25'),\n      vl.y().fieldQ('MMBTU'),\n      vl.tooltip(['County', 'State']),\n    )\n  .width(450)\n  .height(450)\n  .render()\n  .then(viewElement => {\n    // render returns a promise to a DOM element containing the chart\n    // viewElement.value contains the Vega View object instance\n    document.getElementById('pm25').appendChild(viewElement);\n  });\n}\n  \n"]}