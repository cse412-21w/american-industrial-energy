{"version":3,"sources":["future_co2_emit.js"],"names":["co2EmitArray","options","config","init","view","tooltip","vegaTooltip","Handler","call","renderer","vl","register","vega","vegaLite","d3","csv","futureCo2EmitData","then","data","forEach","d","push","drawLineVegaLite","markLine","color","encode","x","fieldT","y","fieldQ","width","height","render","viewElement","document","getElementById","appendChild"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAqE;AACrE,cAAkB;AACA;;;AAElB,IAAIA,YAAY,GAAG,EAAnB,EAAyB;;AAEzB,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,CACN;AADM,GADM;AAIdC,EAAAA,IAAI,EAAE,cAACC,IAAD,EAAU;AACd;AACAA,IAAAA,IAAI,CAACC,OAAL,CAAa,IAAIC,WAAW,CAACC,OAAhB,GAA0BC,IAAvC;AACD,GAPa;AAQdJ,EAAAA,IAAI,EAAE;AACJ;AACA;AACA;AACA;AACA;AACAK,IAAAA,QAAQ,EAAE;AANN;AARQ,CAAhB;AAkBAC,EAAE,CAACC,QAAH,CAAYC,IAAZ,EAAkBC,QAAlB,EAA4BZ,OAA5B,GAEA;;AACAa,EAAE,CAACC,GAAH,CAAOC,2BAAP,EAA0BC,IAA1B,CAA+B,UAASC,IAAT,EAAe;AAC5CA,EAAAA,IAAI,CAACC,OAAL,CAAa,UAASC,CAAT,EAAW;AACtBpB,IAAAA,YAAY,CAACqB,IAAb,CAAkBD,CAAlB;AACD,GAFD;AAGAE,EAAAA,gBAAgB;AACjB,CALD;;AAQA,SAASA,gBAAT,GAA4B;AAC1B;AACA;AACAZ,EAAAA,EAAE,CAACa,QAAH,CAAY;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAZ,EACCN,IADD,CACMlB,YADN,EAECyB,MAFD,CAGIf,EAAE,CAACgB,CAAH,GAAOC,MAAP,CAAc,MAAd,CAHJ,EAIIjB,EAAE,CAACkB,CAAH,GAAOC,MAAP,CAAc,SAAd,CAJJ,EAKInB,EAAE,CAACL,OAAH,CAAW,CAAC,MAAD,EAAQ,SAAR,CAAX,CALJ,EAOCyB,KAPD,CAOO,GAPP,EAQCC,MARD,CAQQ,GARR,EASCC,MATD,GAUCf,IAVD,CAUM,UAAAgB,WAAW,EAAI;AACnB;AACA;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,WAAtC,CAAkDH,WAAlD;AACD,GAdD;AAeD","file":"future_co2_emit.3445fa89.js","sourceRoot":"..\\src","sourcesContent":["import futureCo2EmitData from '../static/world_co2_ssp_cmip6.csv'    // import dataset\r\n\"use strict\";     // the code should be executed in \"strict mode\".\r\n                  // With strict mode, you can not, for example, use undeclared variables\r\n\r\nvar co2EmitArray = [];   // used to store data later\r\n\r\nconst options = {\r\n  config: {\r\n    // Vega-Lite default configuration\r\n  },\r\n  init: (view) => {\r\n    // initialize tooltip handler\r\n    view.tooltip(new vegaTooltip.Handler().call);\r\n  },\r\n  view: {\r\n    // view constructor options\r\n    // remove the loader if you don't want to default to vega-datasets!\r\n    //   loader: vega.loader({\r\n    //     baseURL: \"\",\r\n    //   }),\r\n    renderer: \"canvas\",\r\n  },\r\n};\r\n\r\nvl.register(vega, vegaLite, options);\r\n\r\n// Again, We use d3.csv() to process data\r\nd3.csv(futureCo2EmitData).then(function(data) {\r\n  data.forEach(function(d){\r\n    co2EmitArray.push(d);\r\n  })\r\n  drawLineVegaLite();\r\n});\r\n\r\n\r\nfunction drawLineVegaLite() {\r\n  // var sunshine = add_data(vl, sunshine.csv, format_type = NULL);\r\n  // your visualization goes here\r\n  vl.markLine({color:'green'})\r\n  .data(co2EmitArray)\r\n  .encode(\r\n      vl.x().fieldT('Year'),\r\n      vl.y().fieldQ('SSP5-85'),\r\n      vl.tooltip(['Year','SSP5-85']),\r\n  )\r\n  .width(450)\r\n  .height(450)\r\n  .render()\r\n  .then(viewElement => {\r\n    // render returns a promise to a DOM element containing the chart\r\n    // viewElement.value contains the Vega View object instance\r\n    document.getElementById('future_co2').appendChild(viewElement);\r\n  });\r\n}\r\n  \r\n"]}